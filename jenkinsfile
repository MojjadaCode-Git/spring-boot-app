pipeline {
    agent any

    environment {
        // üåê Docker & GitHub details
        DOCKER_HUB = "saixdocker"
        IMAGE_NAME = "spring-boot-app"
        VERSION = "1.0.${BUILD_NUMBER}"
        GIT_REPO_MANIFEST = "https://github.com/MojjadaCode-Git/spring-boot-manifests.git"
        GIT_BRANCH = "main"

        // üîé SonarQube
        SONAR_URL = "http://18.207.152.200:9000"
    }

    tools {
        maven 'Maven3'
        jdk 'jdk17'   // üîπ use system JDK if you have OpenJDK 17 installed on Jenkins
    }

    stages {

        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/MojjadaCode-Git/spring-boot-app.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh '''
                    mvn clean verify sonar:sonar \
                      -Dsonar.projectKey=spring-boot-app \
                      -Dsonar.host.url=${SONAR_URL} \
                      -Dsonar.login=admin \
                      -Dsonar.password=Virat@2025!
                    '''
                }
            }
        }

        stage('Build JAR') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Build Docker Image') {
            steps {
                // ‚úÖ Uses your fixed Dockerfile (with correct JAR name)
                sh "docker build -t ${DOCKER_HUB}/${IMAGE_NAME}:${VERSION} ."
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-cred', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                    sh '''
                    echo "$PASS" | docker login -u "$USER" --password-stdin
                    docker push ${DOCKER_HUB}/${IMAGE_NAME}:${VERSION}
                    '''
                }
            }
        }

        stage('Update Manifest Repo') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'github-token', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]) {
                    sh '''
                    rm -rf manifests
                    git clone ${GIT_REPO_MANIFEST} manifests
                    cd manifests
                    sed -i "s#saixdocker/spring-boot-app:.*#saixdocker/spring-boot-app:${VERSION}#g" deployment.yaml
                    git config user.email "jenkins@example.com"
                    git config user.name "Jenkins"
                    git add deployment.yaml
                    git commit -m "Updated image tag to ${VERSION}" || echo "No changes to commit"
                    git push https://${GITHUB_USER}:${GITHUB_TOKEN}@github.com/MojjadaCode-Git/spring-boot-manifests.git ${GIT_BRANCH}
                    '''
                }
            }
        }

        stage('Post Build') {
            steps {
                echo "‚úÖ Build completed successfully!"
                echo "üê≥ Docker Image: ${DOCKER_HUB}/${IMAGE_NAME}:${VERSION}"
                echo "üîó Check SonarQube at ${SONAR_URL}/projects"
                echo "üöÄ ArgoCD will auto-sync and deploy the new version"
            }
        }
    }

    post {
        failure {
            echo "‚ùå Build failed ‚Äî please check logs in Jenkins!"
        }
    }
}

